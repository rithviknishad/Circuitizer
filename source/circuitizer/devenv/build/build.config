# Basic build flags for the build system

BUILD = True                            # Whether to compile the source or not
OPTIMISE = True                         # Enable garbage dependency remover for reducing size
REDUCE_SIZE = True                      # Enable lzma-level optimisation for one-time run
COPY_ASSETS = True                      # Whether the resource folder should be copied or not
CONSOLE = False                         # Hide/Show console on Windows

# The builder pointers for the terminal

BUILD_PROVIDER = 'nuitka'               # The build provider where nuitka is stored
PYTHON_POINTER = 'py -3.8'              # The python pointer which can be used to access python in terminal
C_COMPILER = 'msvc=14.2'                # The C/C++ compiler to be used to compile the code to binary

# The runtime & main script pointers

RUNTIME_FILE = 'source/boot.py'         # The file which will act as bootloader for the UI
TARGET_MAIN_FILE = 'source/mainUI.py'   # The main source file which will be compiled as extension

# This is the optimisation table and setup sheets

LINUX_SETUP_SH = 'make.linux.ubuntu.sh'          # The package dependency for linux distro
PYTHON_PIP_CONFIG = 'setup.all.config'           # The python dependency for the project
OPTIMISE_SIZE_LIST = 'optimise.size.all.config'  # The garbage dependency optimisation sheet
OPTIMISE_TAR_LIST = 'optimise.tar.win32.config'  # The lzma-level optimisation sheet

# Complex build args to be used which the build command is passed to the terminal

BUILD_ARGS = [
    '--experimental=use_pefile',       # Use experimental pefile for better dependency
    'standalone',                      # for generating the file as standalone
    'plugin-enable=tk-inter',          # Enable Tcl/Tk support to runtime
    'lto',                             # Enable link-time optimisation
    'remove-output'                    # Remove the garbage files
]
