
    def menu_bar(self, root):
        self.menubar = tk.Menu(root)
        self.root.config(menu=self.menubar)

        class FileMenu:
            self.filemenu = tk.Menu(self.menubar, tearoff=0)

            self.filemenu.add_command(label="New", command=None)
            self.filemenu.add_command(label="Open", command=None)
            self.filemenu.add_command(label="Save", command=None)
            self.filemenu.add_command(label="Save as...", command=None)
            self.filemenu.add_command(label="Close", command=None)

            self.filemenu.add_separator()

            self.filemenu.add_command(label="Exit", command=root.quit)

            self.menubar.add_cascade(label="File", menu=self.filemenu)

        class EditMenu:
            self.editmenu = tk.Menu(self.menubar, tearoff=0)

            self.editmenu.add_command(label="Undo", command=None)
            self.editmenu.add_command(label="Redo", command=None)

            self.editmenu.add_separator()

            self.editmenu.add_command(label="Cut", command=None)
            self.editmenu.add_command(label="Copy", command=None)
            self.editmenu.add_command(label="Paste", command=None)
            self.editmenu.add_command(label="Delete", command=None)
            self.editmenu.add_command(label="Select All", command=None)

            self.menubar.add_cascade(label="Edit", menu=self.editmenu)

        class HelpMenu:
            self.helpmenu = tk.Menu(self.menubar, tearoff=0)
    
            self.helpmenu.add_command(label="Help Index", command=None)
            self.helpmenu.add_command(label="About...", command=None)
    
            self.menubar.add_cascade(label="Help", menu=self.helpmenu)

    def clean_realtime_crt(self):
        file = open(self.temp_filename, 'w')
        file.write('')
        file.close()

    def realtime_save_crt(self, x, y):
        self.pen.stamp()
        self.pen.goto(x - 10, y - 10)
        file = open(self.temp_filename, 'a')
        file.write('\nself.pen.goto(' + str(x) + ',' + str(y) + ')')
        file.write('\nself.pen.stamp()')
        file.close()

        # Clean the working circuit file
        # self.clean_realtime_crt()

        # The filename for the working circuit
        self.filename = None
        self.temp_filename = 'working.circuit'
    class Events:
        def draw_button_event(self):
            if self.toggle_pen:
                self.pen.down()
                self.toggle_pen = False
            else:
                self.pen.up()
                self.toggle_pen = True

        # The add button
        self.image = tk.PhotoImage(file=ADD)
        self.add = tk.Button(self.frame, image=self.image, relief=tk.FLAT, compound=tk.LEFT, command=None)
        self.add.configure(background=TOOL_COLOR, foreground=FG_COLOR)
        self.add.image = self.image
        self.add.pack(side=tk.TOP, fill=tk.BOTH, ipady=5)
    
        # The draw button
        self.image = tk.PhotoImage(file=ADD)
        self.add = tk.Button(self.frame, image=self.image, relief=tk.FLAT, compound=tk.LEFT, command=lambda: exec("self_pointer.Events.draw_button_event(self_pointer)"))
        self.add.configure(background=TOOL_COLOR, foreground=FG_COLOR)
        # reference of this image is required otherwise this image is garbage collected
        self.add.image = self.image
        self.add.pack(side=tk.TOP, fill=tk.BOTH, ipady=5)